/* Sketch was generated by motoblockly 
 Website: http://www.motoblockly.com 
 Author: www.motoduino.com 
 Date: Fri Jan 11 2019 08:34:04 GMT+0800
 */ 
 //PMS5003T空氣品質感測器接線方式1：Vcc==>Vin  2：GND==>GND  4：RX==>D7(13) 5：TX==>D8(15)

#include <SoftwareSerial.h>
#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>

long  PM10;
long  PM2_5;
long  PM1_0;
long  temperature;
long  humidity;
SoftwareSerial pms5003t_Serial(13,15);

#define PMS5003T_PM10      1
#define PMS5003T_PM25      2
#define PMS5003T_PM100     3
#define PMS5003T_TEMPER    4
#define PMS5003T_HUMI      5
long pms_pmcf10=0;
long pms_pmcf25=0;
long pms_pmcf100=0;
long pms_pmat10=0;
long pms_pmat25=0;
long pms_pmat100=0;
long pms_Temperature=0;
long pms_Humidity=0;
// wifi
const char* ssid     = "自己的";
const char* password = "自己的";
ESP8266WiFiMulti WiFiMulti;
WiFiClient client;
//For ThingSpeak
const char* apiKey = "用自己的";
const char* resource = "/update?api_key=";
const char* server = "api.thingspeak.com";

//一些全域變數
int iLinkNetWork=0;


void setup()
{
  iLinkNetWork = 0;
  //初始化序列阜，監控視窗用
  Serial.begin(9600);
  //初始化PMS5003t連線
  pms5003t_Serial.begin(9600);

  PM10 = 0;
  PM2_5 = 0;
  PM1_0 = 0;
  temperature = 0;
  humidity = 0;
  //連線wifi
  WiFi.mode(WIFI_STA);
  WiFiMulti.addAP(ssid, password);
  Serial.println(F("Wait for WiFi... "));
  while (WiFiMulti.run() != WL_CONNECTED) {
    delay(1000);
  }
  Serial.println("");
  Serial.println("WiFi connected  IPaddress:");
  Serial.print(WiFi.localIP());
  iLinkNetWork = 1;
  delay(500);
}


void loop()
{
  PM10 = pms5003t_read_(PMS5003T_PM100);
  PM2_5 = pms5003t_read_(PMS5003T_PM25);
  PM1_0 = pms5003t_read_(PMS5003T_PM10);
  temperature = pms5003t_read_(PMS5003T_TEMPER);
  humidity = pms5003t_read_(PMS5003T_HUMI);
  
  Serial.println("PM1  :" + String(PM1_0) + "(ug/m3)");
  Serial.println("PM2.5:" + String(PM2_5) + "(ug/m3)");
  Serial.println("PM10 :" + String(PM10) + "(ug/m3)");
  Serial.println("temp :" + String(temperature));
  Serial.println("humi :" + String(humidity));
  //寫入Thingspeak
  wrt_to_thingspeak(PM1_0,PM2_5,PM10,temperature,humidity);
  //寫入DB using ws
  send_data_by_php("PMS5003T-1-PM1",String(PM1_0));
  send_data_by_php("PMS5003T-1-PM2_5",String(PM2_5));
  send_data_by_php("PMS5003T-1-PM10",String(PM10));
  send_data_by_php("PMS5003T-1-Temp",String(temperature));
  send_data_by_php("PMS5003T-1-Humi",String(humidity));
  delay(30000);
}

//讀取PMS5003數據
long pms5003t_read_(int datatype) {
  int count = 0;
  unsigned char c;
  unsigned char high;

  pms5003t_Serial.listen();
  while (pms5003t_Serial.available()) {
     c = pms5003t_Serial.read();
  if((count==0 && c!=0x42) || (count==1 && c!=0x4d)){
     Serial.println("pms5003t check failed");
     break;
  }
  if(count > 27){
     Serial.println("pms5003t completed");
     break;
  }
  else if(count == 4 || count == 6 || count == 8 || count == 10 || count == 12 || count == 14 || count == 24 || count == 26){
       high = c; }
  else if(count == 5){
       pms_pmcf10 = 256*high + c;
  }
  else if(count == 7){
       pms_pmcf25 = 256*high + c;
  }
  else if(count == 9){
       pms_pmcf100 = 256*high + c;
  }
  else if(count == 11){
       pms_pmat10 = 256*high + c;
  }
  else if(count == 13){
       pms_pmat25 = 256*high + c;
  }
  else if(count == 15){
       pms_pmat100 = 256*high + c;
  }
  else if(count == 25){
       pms_Temperature = (256*high + c)/10;
  }
  else if(count == 27){
       pms_Humidity = (256*high + c)/10;
  }
  count++;
  }
 while(pms5003t_Serial.available()) pms5003t_Serial.read();

   if(datatype == PMS5003T_PM10)
      return pms_pmcf10;
   else if(datatype == PMS5003T_PM25)
      return pms_pmcf25;
   else if(datatype == PMS5003T_PM100)
      return pms_pmcf100;
   else if(datatype == PMS5003T_TEMPER)
      return pms_Temperature;
   else if(datatype == PMS5003T_HUMI)
      return pms_Humidity;
}

//寫資料到Thingspeak
void wrt_to_thingspeak(float fPM1,float fPM2_5,float fPM10,float fTemp,float fHumi){
  int iLnk = 0;
  String sPM1,sPM2_5,sPM10,sTemp,sHumi;
  
  // 使用 80 Port 連線
  if (client.connect(server, 80)) {
  //  iLnk = 1;
  } 
  sPM1   = String(fPM1);
  sPM2_5 = String(fPM2_5);
  sPM10  = String(fPM10);
  sTemp  = String(fTemp);
  sHumi  = String(fHumi);
  client.print(String("GET ") + resource + apiKey + "&field1=" + sPM1 + "&field2=" + sPM2_5 + "&field3=" + sPM10 + "&field4=" + sTemp + "&field5=" + sHumi +
               " HTTP/1.1\r\n" +
               "Host: " + server + "\r\n" + 
               "Connection: close\r\n\r\n");
                  
  int timeout = 5 * 10; // 5 seconds             
  while(!client.available() && (timeout-- > 0)){
    delay(1000);
  }
  
  if(!client.available()) {
     Serial.println(F("No response, going back to sleep"));
  }
  while(client.available()){
    Serial.write(client.read());
  }
  
  Serial.println(F("\nclosing connection"));
  client.stop();
}

//用WS寫入MySql
void send_data_by_php(String dev_typ,String val){
  int iLnk = 0;
  String s;
 
  if (client.connect("duckegg.duckdns.org", 8088)) {
    iLnk = 1;
  }
  while(iLnk ==0){
    delay(500);
    Serial.print(F("\nreconnect php srv"));
    if (client.connect("duckegg.duckdns.org", 8088)) {
      iLnk = 1;
    }  
  }
  s = "GET /getenvlog.php?devtyp=" + dev_typ + "&val=" + val; 
  Serial.print(F("\n"));
  Serial.print(s);
  client.println(s);
  String line = client.readStringUntil('\r');                
  Serial.println(line);
  Serial.print(F("\nclosing connection"));
  client.stop();
}
